basePath: /api/v1
definitions:
  analytics.DashboardData:
    properties:
      execution_trend:
        $ref: '#/definitions/analytics.TimeSeriesData'
      latency_trend:
        $ref: '#/definitions/analytics.TimeSeriesData'
      overall_stats:
        $ref: '#/definitions/analytics.ExecutionStats'
      rule_stats:
        items:
          $ref: '#/definitions/analytics.RuleStats'
        type: array
      success_rate_trend:
        $ref: '#/definitions/analytics.TimeSeriesData'
      time_range:
        type: string
    type: object
  analytics.ExecutionStats:
    properties:
      average_latency_ms:
        type: number
      failed_executions:
        type: integer
      success_rate:
        type: number
      successful_executions:
        type: integer
      total_executions:
        type: integer
    type: object
  analytics.RuleStats:
    properties:
      average_latency_ms:
        type: number
      failed_executions:
        type: integer
      last_executed:
        type: string
      rule_id:
        type: string
      rule_name:
        type: string
      success_rate:
        type: number
      successful_executions:
        type: integer
      total_executions:
        type: integer
    type: object
  analytics.TimeSeriesData:
    properties:
      data:
        items:
          $ref: '#/definitions/analytics.TimeSeriesPoint'
        type: array
      metric:
        type: string
    type: object
  analytics.TimeSeriesPoint:
    properties:
      timestamp:
        type: string
      value:
        type: number
    type: object
  api.APIErrorResponse:
    properties:
      error:
        example: Error message
        type: string
    type: object
  api.ActionDTO:
    properties:
      created_at:
        type: string
      enabled:
        type: boolean
      id:
        type: string
      lua_script:
        type: string
      updated_at:
        type: string
    type: object
  api.CreateActionRequest:
    properties:
      enabled:
        example: true
        type: boolean
      lua_script:
        example: log_message('info', 'Temperature alert triggered')
        type: string
    required:
    - lua_script
    type: object
  api.CreateRuleRequest:
    properties:
      enabled:
        example: true
        type: boolean
      lua_script:
        example: if event.temperature > 25 then return true end
        type: string
      name:
        example: Temperature Alert Rule
        type: string
      priority:
        example: 0
        type: integer
    required:
    - lua_script
    - name
    type: object
  api.CreateTriggerRequest:
    properties:
      condition_script:
        example: if event.device_id == 'sensor_1' then return true end
        type: string
      enabled:
        example: true
        type: boolean
      rule_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      type:
        enum:
        - CONDITIONAL
        - CRON
        example: CONDITIONAL
        type: string
    required:
    - condition_script
    - rule_id
    - type
    type: object
  api.EvaluateScriptRequest:
    properties:
      script:
        example: return 2 + 2
        type: string
    required:
    - script
    type: object
  api.EvaluateScriptResponse:
    properties:
      duration:
        example: 1.5ms
        type: string
      error:
        example: syntax error
        type: string
      output:
        items: {}
        type: array
      success:
        example: true
        type: boolean
    type: object
  api.RuleDTO:
    properties:
      actions:
        items:
          $ref: '#/definitions/api.ActionDTO'
        type: array
      created_at:
        type: string
      enabled:
        type: boolean
      id:
        type: string
      lua_script:
        type: string
      name:
        type: string
      priority:
        type: integer
      triggers:
        items:
          $ref: '#/definitions/api.TriggerDTO'
        type: array
      updated_at:
        type: string
    type: object
  api.TriggerDTO:
    properties:
      condition_script:
        type: string
      created_at:
        type: string
      enabled:
        type: boolean
      id:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  api.UpdateRuleRequest:
    properties:
      enabled:
        example: false
        type: boolean
      lua_script:
        example: if event.temperature > 30 then return true end
        type: string
      name:
        example: Updated Rule Name
        type: string
      priority:
        example: 5
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A robust rule engine microservice for IoT automation. Allows users
    to create and manage custom automation rules with Lua script execution in a secure
    sandboxed environment.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Rule Engine API
  version: "1.0"
paths:
  /actions:
    get:
      consumes:
      - application/json
      description: Get a list of all actions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.ActionDTO'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIErrorResponse'
      summary: List all actions
      tags:
      - actions
    post:
      consumes:
      - application/json
      description: Create a new action for rule execution
      parameters:
      - description: Action data
        in: body
        name: action
        required: true
        schema:
          $ref: '#/definitions/api.CreateActionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ActionDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIErrorResponse'
      summary: Create a new action
      tags:
      - actions
  /actions/{id}:
    get:
      consumes:
      - application/json
      description: Get a specific action by its ID
      parameters:
      - description: Action ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ActionDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIErrorResponse'
      summary: Get action by ID
      tags:
      - actions
  /analytics/dashboard:
    get:
      consumes:
      - application/json
      description: Get aggregated analytics data for the dashboard
      parameters:
      - description: Time range (1h, 24h, 7d, 30d)
        enum:
        - 1h
        - 24h
        - 7d
        - 30d
        in: query
        name: timeRange
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/analytics.DashboardData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIErrorResponse'
      summary: Get analytics dashboard data
      tags:
      - analytics
  /evaluate:
    post:
      consumes:
      - application/json
      description: Execute a Lua script in a sandboxed environment and return the
        result
      parameters:
      - description: Script evaluation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.EvaluateScriptRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.EvaluateScriptResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIErrorResponse'
      summary: Evaluate a Lua script
      tags:
      - scripts
  /health:
    get:
      consumes:
      - application/json
      description: Get the health status of the service
      produces:
      - text/plain
      responses:
        "200":
          description: healthy
          schema:
            type: string
      summary: Health check
      tags:
      - system
  /rules:
    get:
      consumes:
      - application/json
      description: Get a list of all automation rules
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.RuleDTO'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIErrorResponse'
      summary: List all rules
      tags:
      - rules
    post:
      consumes:
      - application/json
      description: Create a new automation rule with Lua script
      parameters:
      - description: Rule data
        in: body
        name: rule
        required: true
        schema:
          $ref: '#/definitions/api.CreateRuleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RuleDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIErrorResponse'
      summary: Create a new rule
      tags:
      - rules
  /rules/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an automation rule by its ID
      parameters:
      - description: Rule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIErrorResponse'
      summary: Delete rule
      tags:
      - rules
    get:
      consumes:
      - application/json
      description: Get a specific automation rule by its ID
      parameters:
      - description: Rule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RuleDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIErrorResponse'
      summary: Get rule by ID
      tags:
      - rules
    put:
      consumes:
      - application/json
      description: Update an existing automation rule
      parameters:
      - description: Rule ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated rule data
        in: body
        name: rule
        required: true
        schema:
          $ref: '#/definitions/api.UpdateRuleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RuleDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIErrorResponse'
      summary: Update rule
      tags:
      - rules
  /triggers:
    get:
      consumes:
      - application/json
      description: Get a list of all triggers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.TriggerDTO'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIErrorResponse'
      summary: List all triggers
      tags:
      - triggers
    post:
      consumes:
      - application/json
      description: Create a new trigger for rule execution
      parameters:
      - description: Trigger data
        in: body
        name: trigger
        required: true
        schema:
          $ref: '#/definitions/api.CreateTriggerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.TriggerDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIErrorResponse'
      summary: Create a new trigger
      tags:
      - triggers
  /triggers/{id}:
    get:
      consumes:
      - application/json
      description: Get a specific trigger by its ID
      parameters:
      - description: Trigger ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.TriggerDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIErrorResponse'
      summary: Get trigger by ID
      tags:
      - triggers
securityDefinitions:
  ApiKeyAuth:
    description: 'API key authentication. Format: "ApiKey <your-api-key>"'
    in: header
    name: Authorization
    type: apiKey
  BearerAuth:
    description: 'JWT Bearer token authentication. Format: "Bearer <your-jwt-token>"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
