/*
Rule Engine API

A robust rule engine microservice for IoT automation. Allows users to create and manage custom automation rules with Lua script execution in a secure sandboxed environment.

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ruleengine

import (
	"encoding/json"
)

// checks if the AnalyticsRuleStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnalyticsRuleStats{}

// AnalyticsRuleStats struct for AnalyticsRuleStats
type AnalyticsRuleStats struct {
	AverageLatencyMs *float32 `json:"average_latency_ms,omitempty"`
	FailedExecutions *int32 `json:"failed_executions,omitempty"`
	LastExecuted *string `json:"last_executed,omitempty"`
	RuleId *string `json:"rule_id,omitempty"`
	RuleName *string `json:"rule_name,omitempty"`
	SuccessRate *float32 `json:"success_rate,omitempty"`
	SuccessfulExecutions *int32 `json:"successful_executions,omitempty"`
	TotalExecutions *int32 `json:"total_executions,omitempty"`
}

// NewAnalyticsRuleStats instantiates a new AnalyticsRuleStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyticsRuleStats() *AnalyticsRuleStats {
	this := AnalyticsRuleStats{}
	return &this
}

// NewAnalyticsRuleStatsWithDefaults instantiates a new AnalyticsRuleStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyticsRuleStatsWithDefaults() *AnalyticsRuleStats {
	this := AnalyticsRuleStats{}
	return &this
}

// GetAverageLatencyMs returns the AverageLatencyMs field value if set, zero value otherwise.
func (o *AnalyticsRuleStats) GetAverageLatencyMs() float32 {
	if o == nil || IsNil(o.AverageLatencyMs) {
		var ret float32
		return ret
	}
	return *o.AverageLatencyMs
}

// GetAverageLatencyMsOk returns a tuple with the AverageLatencyMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsRuleStats) GetAverageLatencyMsOk() (*float32, bool) {
	if o == nil || IsNil(o.AverageLatencyMs) {
		return nil, false
	}
	return o.AverageLatencyMs, true
}

// HasAverageLatencyMs returns a boolean if a field has been set.
func (o *AnalyticsRuleStats) HasAverageLatencyMs() bool {
	if o != nil && !IsNil(o.AverageLatencyMs) {
		return true
	}

	return false
}

// SetAverageLatencyMs gets a reference to the given float32 and assigns it to the AverageLatencyMs field.
func (o *AnalyticsRuleStats) SetAverageLatencyMs(v float32) {
	o.AverageLatencyMs = &v
}

// GetFailedExecutions returns the FailedExecutions field value if set, zero value otherwise.
func (o *AnalyticsRuleStats) GetFailedExecutions() int32 {
	if o == nil || IsNil(o.FailedExecutions) {
		var ret int32
		return ret
	}
	return *o.FailedExecutions
}

// GetFailedExecutionsOk returns a tuple with the FailedExecutions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsRuleStats) GetFailedExecutionsOk() (*int32, bool) {
	if o == nil || IsNil(o.FailedExecutions) {
		return nil, false
	}
	return o.FailedExecutions, true
}

// HasFailedExecutions returns a boolean if a field has been set.
func (o *AnalyticsRuleStats) HasFailedExecutions() bool {
	if o != nil && !IsNil(o.FailedExecutions) {
		return true
	}

	return false
}

// SetFailedExecutions gets a reference to the given int32 and assigns it to the FailedExecutions field.
func (o *AnalyticsRuleStats) SetFailedExecutions(v int32) {
	o.FailedExecutions = &v
}

// GetLastExecuted returns the LastExecuted field value if set, zero value otherwise.
func (o *AnalyticsRuleStats) GetLastExecuted() string {
	if o == nil || IsNil(o.LastExecuted) {
		var ret string
		return ret
	}
	return *o.LastExecuted
}

// GetLastExecutedOk returns a tuple with the LastExecuted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsRuleStats) GetLastExecutedOk() (*string, bool) {
	if o == nil || IsNil(o.LastExecuted) {
		return nil, false
	}
	return o.LastExecuted, true
}

// HasLastExecuted returns a boolean if a field has been set.
func (o *AnalyticsRuleStats) HasLastExecuted() bool {
	if o != nil && !IsNil(o.LastExecuted) {
		return true
	}

	return false
}

// SetLastExecuted gets a reference to the given string and assigns it to the LastExecuted field.
func (o *AnalyticsRuleStats) SetLastExecuted(v string) {
	o.LastExecuted = &v
}

// GetRuleId returns the RuleId field value if set, zero value otherwise.
func (o *AnalyticsRuleStats) GetRuleId() string {
	if o == nil || IsNil(o.RuleId) {
		var ret string
		return ret
	}
	return *o.RuleId
}

// GetRuleIdOk returns a tuple with the RuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsRuleStats) GetRuleIdOk() (*string, bool) {
	if o == nil || IsNil(o.RuleId) {
		return nil, false
	}
	return o.RuleId, true
}

// HasRuleId returns a boolean if a field has been set.
func (o *AnalyticsRuleStats) HasRuleId() bool {
	if o != nil && !IsNil(o.RuleId) {
		return true
	}

	return false
}

// SetRuleId gets a reference to the given string and assigns it to the RuleId field.
func (o *AnalyticsRuleStats) SetRuleId(v string) {
	o.RuleId = &v
}

// GetRuleName returns the RuleName field value if set, zero value otherwise.
func (o *AnalyticsRuleStats) GetRuleName() string {
	if o == nil || IsNil(o.RuleName) {
		var ret string
		return ret
	}
	return *o.RuleName
}

// GetRuleNameOk returns a tuple with the RuleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsRuleStats) GetRuleNameOk() (*string, bool) {
	if o == nil || IsNil(o.RuleName) {
		return nil, false
	}
	return o.RuleName, true
}

// HasRuleName returns a boolean if a field has been set.
func (o *AnalyticsRuleStats) HasRuleName() bool {
	if o != nil && !IsNil(o.RuleName) {
		return true
	}

	return false
}

// SetRuleName gets a reference to the given string and assigns it to the RuleName field.
func (o *AnalyticsRuleStats) SetRuleName(v string) {
	o.RuleName = &v
}

// GetSuccessRate returns the SuccessRate field value if set, zero value otherwise.
func (o *AnalyticsRuleStats) GetSuccessRate() float32 {
	if o == nil || IsNil(o.SuccessRate) {
		var ret float32
		return ret
	}
	return *o.SuccessRate
}

// GetSuccessRateOk returns a tuple with the SuccessRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsRuleStats) GetSuccessRateOk() (*float32, bool) {
	if o == nil || IsNil(o.SuccessRate) {
		return nil, false
	}
	return o.SuccessRate, true
}

// HasSuccessRate returns a boolean if a field has been set.
func (o *AnalyticsRuleStats) HasSuccessRate() bool {
	if o != nil && !IsNil(o.SuccessRate) {
		return true
	}

	return false
}

// SetSuccessRate gets a reference to the given float32 and assigns it to the SuccessRate field.
func (o *AnalyticsRuleStats) SetSuccessRate(v float32) {
	o.SuccessRate = &v
}

// GetSuccessfulExecutions returns the SuccessfulExecutions field value if set, zero value otherwise.
func (o *AnalyticsRuleStats) GetSuccessfulExecutions() int32 {
	if o == nil || IsNil(o.SuccessfulExecutions) {
		var ret int32
		return ret
	}
	return *o.SuccessfulExecutions
}

// GetSuccessfulExecutionsOk returns a tuple with the SuccessfulExecutions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsRuleStats) GetSuccessfulExecutionsOk() (*int32, bool) {
	if o == nil || IsNil(o.SuccessfulExecutions) {
		return nil, false
	}
	return o.SuccessfulExecutions, true
}

// HasSuccessfulExecutions returns a boolean if a field has been set.
func (o *AnalyticsRuleStats) HasSuccessfulExecutions() bool {
	if o != nil && !IsNil(o.SuccessfulExecutions) {
		return true
	}

	return false
}

// SetSuccessfulExecutions gets a reference to the given int32 and assigns it to the SuccessfulExecutions field.
func (o *AnalyticsRuleStats) SetSuccessfulExecutions(v int32) {
	o.SuccessfulExecutions = &v
}

// GetTotalExecutions returns the TotalExecutions field value if set, zero value otherwise.
func (o *AnalyticsRuleStats) GetTotalExecutions() int32 {
	if o == nil || IsNil(o.TotalExecutions) {
		var ret int32
		return ret
	}
	return *o.TotalExecutions
}

// GetTotalExecutionsOk returns a tuple with the TotalExecutions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsRuleStats) GetTotalExecutionsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalExecutions) {
		return nil, false
	}
	return o.TotalExecutions, true
}

// HasTotalExecutions returns a boolean if a field has been set.
func (o *AnalyticsRuleStats) HasTotalExecutions() bool {
	if o != nil && !IsNil(o.TotalExecutions) {
		return true
	}

	return false
}

// SetTotalExecutions gets a reference to the given int32 and assigns it to the TotalExecutions field.
func (o *AnalyticsRuleStats) SetTotalExecutions(v int32) {
	o.TotalExecutions = &v
}

func (o AnalyticsRuleStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnalyticsRuleStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AverageLatencyMs) {
		toSerialize["average_latency_ms"] = o.AverageLatencyMs
	}
	if !IsNil(o.FailedExecutions) {
		toSerialize["failed_executions"] = o.FailedExecutions
	}
	if !IsNil(o.LastExecuted) {
		toSerialize["last_executed"] = o.LastExecuted
	}
	if !IsNil(o.RuleId) {
		toSerialize["rule_id"] = o.RuleId
	}
	if !IsNil(o.RuleName) {
		toSerialize["rule_name"] = o.RuleName
	}
	if !IsNil(o.SuccessRate) {
		toSerialize["success_rate"] = o.SuccessRate
	}
	if !IsNil(o.SuccessfulExecutions) {
		toSerialize["successful_executions"] = o.SuccessfulExecutions
	}
	if !IsNil(o.TotalExecutions) {
		toSerialize["total_executions"] = o.TotalExecutions
	}
	return toSerialize, nil
}

type NullableAnalyticsRuleStats struct {
	value *AnalyticsRuleStats
	isSet bool
}

func (v NullableAnalyticsRuleStats) Get() *AnalyticsRuleStats {
	return v.value
}

func (v *NullableAnalyticsRuleStats) Set(val *AnalyticsRuleStats) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsRuleStats) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsRuleStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsRuleStats(val *AnalyticsRuleStats) *NullableAnalyticsRuleStats {
	return &NullableAnalyticsRuleStats{value: val, isSet: true}
}

func (v NullableAnalyticsRuleStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsRuleStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


