openapi: 3.0.1
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A robust rule engine microservice for IoT automation. Allows users
    to create and manage custom automation rules with Lua script execution in a secure
    sandboxed environment.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Rule Engine API
  version: "1.0"
servers:
- url: //localhost:8080/api/v1
paths:
  /actions:
    get:
      description: Get a list of all actions
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/api.ActionDTO"
                type: array
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.APIErrorResponse"
          description: Internal Server Error
      summary: List all actions
      tags:
      - actions
    post:
      description: Create a new action for rule execution
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/api.CreateActionRequest"
        description: Action data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.ActionDTO"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.APIErrorResponse"
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.APIErrorResponse"
          description: Internal Server Error
      summary: Create a new action
      tags:
      - actions
      x-codegen-request-body-name: action
  /actions/{id}:
    get:
      description: Get a specific action by its ID
      parameters:
      - description: Action ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.ActionDTO"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.APIErrorResponse"
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.APIErrorResponse"
          description: Not Found
      summary: Get action by ID
      tags:
      - actions
  /analytics/dashboard:
    get:
      description: Get aggregated analytics data for the dashboard
      parameters:
      - description: "Time range (1h, 24h, 7d, 30d)"
        in: query
        name: timeRange
        schema:
          enum:
          - 1h
          - 24h
          - 7d
          - 30d
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/analytics.DashboardData"
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.APIErrorResponse"
          description: Internal Server Error
      summary: Get analytics dashboard data
      tags:
      - analytics
  /health:
    get:
      description: Get the health status of the service
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: string
                type: object
          description: OK
      summary: Health check
      tags:
      - system
  /rules:
    get:
      description: Get a list of all automation rules
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/api.RuleDTO"
                type: array
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.APIErrorResponse"
          description: Internal Server Error
      summary: List all rules
      tags:
      - rules
    post:
      description: Create a new automation rule with Lua script
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/api.CreateRuleRequest"
        description: Rule data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.RuleDTO"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.APIErrorResponse"
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.APIErrorResponse"
          description: Internal Server Error
      summary: Create a new rule
      tags:
      - rules
      x-codegen-request-body-name: rule
  /rules/{id}:
    delete:
      description: Delete an automation rule by its ID
      parameters:
      - description: Rule ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.APIErrorResponse"
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.APIErrorResponse"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.APIErrorResponse"
          description: Internal Server Error
      summary: Delete rule
      tags:
      - rules
    get:
      description: Get a specific automation rule by its ID
      parameters:
      - description: Rule ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.RuleDTO"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.APIErrorResponse"
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.APIErrorResponse"
          description: Not Found
      summary: Get rule by ID
      tags:
      - rules
    put:
      description: Update an existing automation rule
      parameters:
      - description: Rule ID
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/api.UpdateRuleRequest"
        description: Updated rule data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.RuleDTO"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.APIErrorResponse"
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.APIErrorResponse"
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.APIErrorResponse"
          description: Internal Server Error
      summary: Update rule
      tags:
      - rules
      x-codegen-request-body-name: rule
  /triggers:
    get:
      description: Get a list of all triggers
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/api.TriggerDTO"
                type: array
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.APIErrorResponse"
          description: Internal Server Error
      summary: List all triggers
      tags:
      - triggers
    post:
      description: Create a new trigger for rule execution
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/api.CreateTriggerRequest"
        description: Trigger data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.TriggerDTO"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.APIErrorResponse"
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.APIErrorResponse"
          description: Internal Server Error
      summary: Create a new trigger
      tags:
      - triggers
      x-codegen-request-body-name: trigger
  /triggers/{id}:
    get:
      description: Get a specific trigger by its ID
      parameters:
      - description: Trigger ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.TriggerDTO"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.APIErrorResponse"
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/api.APIErrorResponse"
          description: Not Found
      summary: Get trigger by ID
      tags:
      - triggers
components:
  schemas:
    analytics.DashboardData:
      example:
        success_rate_trend:
          data:
          - value: 0.8008281904610115
            timestamp: timestamp
          - value: 0.8008281904610115
            timestamp: timestamp
          metric: metric
        time_range: time_range
        execution_trend:
          data:
          - value: 0.8008281904610115
            timestamp: timestamp
          - value: 0.8008281904610115
            timestamp: timestamp
          metric: metric
        rule_stats:
        - rule_id: rule_id
          successful_executions: 2
          rule_name: rule_name
          average_latency_ms: 7.061401241503109
          failed_executions: 9
          last_executed: last_executed
          success_rate: 3.616076749251911
          total_executions: 4
        - rule_id: rule_id
          successful_executions: 2
          rule_name: rule_name
          average_latency_ms: 7.061401241503109
          failed_executions: 9
          last_executed: last_executed
          success_rate: 3.616076749251911
          total_executions: 4
        overall_stats:
          successful_executions: 5
          average_latency_ms: 6.027456183070403
          failed_executions: 1
          success_rate: 5.962133916683182
          total_executions: 2
        latency_trend:
          data:
          - value: 0.8008281904610115
            timestamp: timestamp
          - value: 0.8008281904610115
            timestamp: timestamp
          metric: metric
      properties:
        execution_trend:
          $ref: "#/components/schemas/analytics.TimeSeriesData"
        latency_trend:
          $ref: "#/components/schemas/analytics.TimeSeriesData"
        overall_stats:
          $ref: "#/components/schemas/analytics.ExecutionStats"
        rule_stats:
          items:
            $ref: "#/components/schemas/analytics.RuleStats"
          type: array
        success_rate_trend:
          $ref: "#/components/schemas/analytics.TimeSeriesData"
        time_range:
          type: string
      type: object
    analytics.ExecutionStats:
      example:
        successful_executions: 5
        average_latency_ms: 6.027456183070403
        failed_executions: 1
        success_rate: 5.962133916683182
        total_executions: 2
      properties:
        average_latency_ms:
          type: number
        failed_executions:
          type: integer
        success_rate:
          type: number
        successful_executions:
          type: integer
        total_executions:
          type: integer
      type: object
    analytics.RuleStats:
      example:
        rule_id: rule_id
        successful_executions: 2
        rule_name: rule_name
        average_latency_ms: 7.061401241503109
        failed_executions: 9
        last_executed: last_executed
        success_rate: 3.616076749251911
        total_executions: 4
      properties:
        average_latency_ms:
          type: number
        failed_executions:
          type: integer
        last_executed:
          type: string
        rule_id:
          type: string
        rule_name:
          type: string
        success_rate:
          type: number
        successful_executions:
          type: integer
        total_executions:
          type: integer
      type: object
    analytics.TimeSeriesData:
      example:
        data:
        - value: 0.8008281904610115
          timestamp: timestamp
        - value: 0.8008281904610115
          timestamp: timestamp
        metric: metric
      properties:
        data:
          items:
            $ref: "#/components/schemas/analytics.TimeSeriesPoint"
          type: array
        metric:
          type: string
      type: object
    analytics.TimeSeriesPoint:
      example:
        value: 0.8008281904610115
        timestamp: timestamp
      properties:
        timestamp:
          type: string
        value:
          type: number
      type: object
    api.APIErrorResponse:
      example:
        error: Error message
      properties:
        error:
          example: Error message
          type: string
      type: object
    api.ActionDTO:
      example:
        updated_at: updated_at
        lua_script: lua_script
        created_at: created_at
        id: id
        enabled: true
      properties:
        created_at:
          type: string
        enabled:
          type: boolean
        id:
          type: string
        lua_script:
          type: string
        updated_at:
          type: string
      type: object
    api.CreateActionRequest:
      properties:
        enabled:
          example: true
          type: boolean
        lua_script:
          example: "log_message('info', 'Temperature alert triggered')"
          type: string
      required:
      - lua_script
      type: object
    api.CreateRuleRequest:
      properties:
        enabled:
          example: true
          type: boolean
        lua_script:
          example: if event.temperature > 25 then return true end
          type: string
        name:
          example: Temperature Alert Rule
          type: string
        priority:
          example: 0
          type: integer
      required:
      - lua_script
      - name
      type: object
    api.CreateTriggerRequest:
      properties:
        condition_script:
          example: if event.device_id == 'sensor_1' then return true end
          type: string
        enabled:
          example: true
          type: boolean
        rule_id:
          example: 550e8400-e29b-41d4-a716-446655440000
          type: string
        type:
          enum:
          - CONDITIONAL
          - CRON
          example: CONDITIONAL
          type: string
      required:
      - condition_script
      - rule_id
      - type
      type: object
    api.RuleDTO:
      example:
        updated_at: updated_at
        lua_script: lua_script
        name: name
        created_at: created_at
        id: id
        priority: 0
        triggers:
        - updated_at: updated_at
          condition_script: condition_script
          created_at: created_at
          id: id
          type: type
          enabled: true
        - updated_at: updated_at
          condition_script: condition_script
          created_at: created_at
          id: id
          type: type
          enabled: true
        actions:
        - updated_at: updated_at
          lua_script: lua_script
          created_at: created_at
          id: id
          enabled: true
        - updated_at: updated_at
          lua_script: lua_script
          created_at: created_at
          id: id
          enabled: true
        enabled: true
      properties:
        actions:
          items:
            $ref: "#/components/schemas/api.ActionDTO"
          type: array
        created_at:
          type: string
        enabled:
          type: boolean
        id:
          type: string
        lua_script:
          type: string
        name:
          type: string
        priority:
          type: integer
        triggers:
          items:
            $ref: "#/components/schemas/api.TriggerDTO"
          type: array
        updated_at:
          type: string
      type: object
    api.TriggerDTO:
      example:
        updated_at: updated_at
        condition_script: condition_script
        created_at: created_at
        id: id
        type: type
        enabled: true
      properties:
        condition_script:
          type: string
        created_at:
          type: string
        enabled:
          type: boolean
        id:
          type: string
        type:
          type: string
        updated_at:
          type: string
      type: object
    api.UpdateRuleRequest:
      properties:
        enabled:
          example: false
          type: boolean
        lua_script:
          example: if event.temperature > 30 then return true end
          type: string
        name:
          example: Updated Rule Name
          type: string
        priority:
          example: 5
          type: integer
      type: object
  securitySchemes:
    ApiKeyAuth:
      description: "API key authentication. Format: \"ApiKey <your-api-key>\""
      in: header
      name: Authorization
      type: apiKey
    BearerAuth:
      description: "JWT Bearer token authentication. Format: \"Bearer <your-jwt-token>\""
      in: header
      name: Authorization
      type: apiKey
x-original-swagger-version: "2.0"
