/*
Rule Engine API

A robust rule engine microservice for IoT automation. Allows users to create and manage custom automation rules with Lua script execution in a secure sandboxed environment.

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ruleengine

import (
	"encoding/json"
)

// checks if the ApiUpdateRuleRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiUpdateRuleRequest{}

// ApiUpdateRuleRequest struct for ApiUpdateRuleRequest
type ApiUpdateRuleRequest struct {
	Enabled *bool `json:"enabled,omitempty"`
	LuaScript *string `json:"lua_script,omitempty"`
	Name *string `json:"name,omitempty"`
	Priority *int32 `json:"priority,omitempty"`
}

// NewApiUpdateRuleRequest instantiates a new ApiUpdateRuleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiUpdateRuleRequest() *ApiUpdateRuleRequest {
	this := ApiUpdateRuleRequest{}
	return &this
}

// NewApiUpdateRuleRequestWithDefaults instantiates a new ApiUpdateRuleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiUpdateRuleRequestWithDefaults() *ApiUpdateRuleRequest {
	this := ApiUpdateRuleRequest{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ApiUpdateRuleRequest) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiUpdateRuleRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ApiUpdateRuleRequest) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ApiUpdateRuleRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetLuaScript returns the LuaScript field value if set, zero value otherwise.
func (o *ApiUpdateRuleRequest) GetLuaScript() string {
	if o == nil || IsNil(o.LuaScript) {
		var ret string
		return ret
	}
	return *o.LuaScript
}

// GetLuaScriptOk returns a tuple with the LuaScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiUpdateRuleRequest) GetLuaScriptOk() (*string, bool) {
	if o == nil || IsNil(o.LuaScript) {
		return nil, false
	}
	return o.LuaScript, true
}

// HasLuaScript returns a boolean if a field has been set.
func (o *ApiUpdateRuleRequest) HasLuaScript() bool {
	if o != nil && !IsNil(o.LuaScript) {
		return true
	}

	return false
}

// SetLuaScript gets a reference to the given string and assigns it to the LuaScript field.
func (o *ApiUpdateRuleRequest) SetLuaScript(v string) {
	o.LuaScript = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApiUpdateRuleRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiUpdateRuleRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApiUpdateRuleRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApiUpdateRuleRequest) SetName(v string) {
	o.Name = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *ApiUpdateRuleRequest) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiUpdateRuleRequest) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *ApiUpdateRuleRequest) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *ApiUpdateRuleRequest) SetPriority(v int32) {
	o.Priority = &v
}

func (o ApiUpdateRuleRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiUpdateRuleRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.LuaScript) {
		toSerialize["lua_script"] = o.LuaScript
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	return toSerialize, nil
}

type NullableApiUpdateRuleRequest struct {
	value *ApiUpdateRuleRequest
	isSet bool
}

func (v NullableApiUpdateRuleRequest) Get() *ApiUpdateRuleRequest {
	return v.value
}

func (v *NullableApiUpdateRuleRequest) Set(val *ApiUpdateRuleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApiUpdateRuleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApiUpdateRuleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiUpdateRuleRequest(val *ApiUpdateRuleRequest) *NullableApiUpdateRuleRequest {
	return &NullableApiUpdateRuleRequest{value: val, isSet: true}
}

func (v NullableApiUpdateRuleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiUpdateRuleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


