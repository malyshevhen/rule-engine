/*
Rule Engine API

A robust rule engine microservice for IoT automation. Allows users to create and manage custom automation rules with Lua script execution in a secure sandboxed environment.

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ruleengine

import (
	"encoding/json"
)

// checks if the ApiAPIErrorResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiAPIErrorResponse{}

// ApiAPIErrorResponse struct for ApiAPIErrorResponse
type ApiAPIErrorResponse struct {
	Error *string `json:"error,omitempty"`
}

// NewApiAPIErrorResponse instantiates a new ApiAPIErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAPIErrorResponse() *ApiAPIErrorResponse {
	this := ApiAPIErrorResponse{}
	return &this
}

// NewApiAPIErrorResponseWithDefaults instantiates a new ApiAPIErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAPIErrorResponseWithDefaults() *ApiAPIErrorResponse {
	this := ApiAPIErrorResponse{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ApiAPIErrorResponse) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAPIErrorResponse) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ApiAPIErrorResponse) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *ApiAPIErrorResponse) SetError(v string) {
	o.Error = &v
}

func (o ApiAPIErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiAPIErrorResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableApiAPIErrorResponse struct {
	value *ApiAPIErrorResponse
	isSet bool
}

func (v NullableApiAPIErrorResponse) Get() *ApiAPIErrorResponse {
	return v.value
}

func (v *NullableApiAPIErrorResponse) Set(val *ApiAPIErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAPIErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAPIErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAPIErrorResponse(val *ApiAPIErrorResponse) *NullableApiAPIErrorResponse {
	return &NullableApiAPIErrorResponse{value: val, isSet: true}
}

func (v NullableApiAPIErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAPIErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


