/*
Rule Engine API

A robust rule engine microservice for IoT automation. Allows users to create and manage custom automation rules with Lua script execution in a secure sandboxed environment.

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ruleengine

import (
	"encoding/json"
)

// checks if the ApiRuleDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiRuleDTO{}

// ApiRuleDTO struct for ApiRuleDTO
type ApiRuleDTO struct {
	Actions []ApiActionDTO `json:"actions,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Id *string `json:"id,omitempty"`
	LuaScript *string `json:"lua_script,omitempty"`
	Name *string `json:"name,omitempty"`
	Priority *int32 `json:"priority,omitempty"`
	Triggers []ApiTriggerDTO `json:"triggers,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// NewApiRuleDTO instantiates a new ApiRuleDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiRuleDTO() *ApiRuleDTO {
	this := ApiRuleDTO{}
	return &this
}

// NewApiRuleDTOWithDefaults instantiates a new ApiRuleDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiRuleDTOWithDefaults() *ApiRuleDTO {
	this := ApiRuleDTO{}
	return &this
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *ApiRuleDTO) GetActions() []ApiActionDTO {
	if o == nil || IsNil(o.Actions) {
		var ret []ApiActionDTO
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRuleDTO) GetActionsOk() ([]ApiActionDTO, bool) {
	if o == nil || IsNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *ApiRuleDTO) HasActions() bool {
	if o != nil && !IsNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given []ApiActionDTO and assigns it to the Actions field.
func (o *ApiRuleDTO) SetActions(v []ApiActionDTO) {
	o.Actions = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ApiRuleDTO) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRuleDTO) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ApiRuleDTO) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *ApiRuleDTO) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ApiRuleDTO) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRuleDTO) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ApiRuleDTO) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ApiRuleDTO) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApiRuleDTO) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRuleDTO) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApiRuleDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApiRuleDTO) SetId(v string) {
	o.Id = &v
}

// GetLuaScript returns the LuaScript field value if set, zero value otherwise.
func (o *ApiRuleDTO) GetLuaScript() string {
	if o == nil || IsNil(o.LuaScript) {
		var ret string
		return ret
	}
	return *o.LuaScript
}

// GetLuaScriptOk returns a tuple with the LuaScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRuleDTO) GetLuaScriptOk() (*string, bool) {
	if o == nil || IsNil(o.LuaScript) {
		return nil, false
	}
	return o.LuaScript, true
}

// HasLuaScript returns a boolean if a field has been set.
func (o *ApiRuleDTO) HasLuaScript() bool {
	if o != nil && !IsNil(o.LuaScript) {
		return true
	}

	return false
}

// SetLuaScript gets a reference to the given string and assigns it to the LuaScript field.
func (o *ApiRuleDTO) SetLuaScript(v string) {
	o.LuaScript = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApiRuleDTO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRuleDTO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApiRuleDTO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApiRuleDTO) SetName(v string) {
	o.Name = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *ApiRuleDTO) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRuleDTO) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *ApiRuleDTO) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *ApiRuleDTO) SetPriority(v int32) {
	o.Priority = &v
}

// GetTriggers returns the Triggers field value if set, zero value otherwise.
func (o *ApiRuleDTO) GetTriggers() []ApiTriggerDTO {
	if o == nil || IsNil(o.Triggers) {
		var ret []ApiTriggerDTO
		return ret
	}
	return o.Triggers
}

// GetTriggersOk returns a tuple with the Triggers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRuleDTO) GetTriggersOk() ([]ApiTriggerDTO, bool) {
	if o == nil || IsNil(o.Triggers) {
		return nil, false
	}
	return o.Triggers, true
}

// HasTriggers returns a boolean if a field has been set.
func (o *ApiRuleDTO) HasTriggers() bool {
	if o != nil && !IsNil(o.Triggers) {
		return true
	}

	return false
}

// SetTriggers gets a reference to the given []ApiTriggerDTO and assigns it to the Triggers field.
func (o *ApiRuleDTO) SetTriggers(v []ApiTriggerDTO) {
	o.Triggers = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ApiRuleDTO) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRuleDTO) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ApiRuleDTO) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *ApiRuleDTO) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

func (o ApiRuleDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiRuleDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Actions) {
		toSerialize["actions"] = o.Actions
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LuaScript) {
		toSerialize["lua_script"] = o.LuaScript
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.Triggers) {
		toSerialize["triggers"] = o.Triggers
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableApiRuleDTO struct {
	value *ApiRuleDTO
	isSet bool
}

func (v NullableApiRuleDTO) Get() *ApiRuleDTO {
	return v.value
}

func (v *NullableApiRuleDTO) Set(val *ApiRuleDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableApiRuleDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableApiRuleDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiRuleDTO(val *ApiRuleDTO) *NullableApiRuleDTO {
	return &NullableApiRuleDTO{value: val, isSet: true}
}

func (v NullableApiRuleDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiRuleDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


