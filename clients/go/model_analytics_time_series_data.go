/*
Rule Engine API

A robust rule engine microservice for IoT automation. Allows users to create and manage custom automation rules with Lua script execution in a secure sandboxed environment.

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ruleengine

import (
	"encoding/json"
)

// checks if the AnalyticsTimeSeriesData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnalyticsTimeSeriesData{}

// AnalyticsTimeSeriesData struct for AnalyticsTimeSeriesData
type AnalyticsTimeSeriesData struct {
	Data []AnalyticsTimeSeriesPoint `json:"data,omitempty"`
	Metric *string `json:"metric,omitempty"`
}

// NewAnalyticsTimeSeriesData instantiates a new AnalyticsTimeSeriesData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyticsTimeSeriesData() *AnalyticsTimeSeriesData {
	this := AnalyticsTimeSeriesData{}
	return &this
}

// NewAnalyticsTimeSeriesDataWithDefaults instantiates a new AnalyticsTimeSeriesData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyticsTimeSeriesDataWithDefaults() *AnalyticsTimeSeriesData {
	this := AnalyticsTimeSeriesData{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *AnalyticsTimeSeriesData) GetData() []AnalyticsTimeSeriesPoint {
	if o == nil || IsNil(o.Data) {
		var ret []AnalyticsTimeSeriesPoint
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsTimeSeriesData) GetDataOk() ([]AnalyticsTimeSeriesPoint, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *AnalyticsTimeSeriesData) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []AnalyticsTimeSeriesPoint and assigns it to the Data field.
func (o *AnalyticsTimeSeriesData) SetData(v []AnalyticsTimeSeriesPoint) {
	o.Data = v
}

// GetMetric returns the Metric field value if set, zero value otherwise.
func (o *AnalyticsTimeSeriesData) GetMetric() string {
	if o == nil || IsNil(o.Metric) {
		var ret string
		return ret
	}
	return *o.Metric
}

// GetMetricOk returns a tuple with the Metric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsTimeSeriesData) GetMetricOk() (*string, bool) {
	if o == nil || IsNil(o.Metric) {
		return nil, false
	}
	return o.Metric, true
}

// HasMetric returns a boolean if a field has been set.
func (o *AnalyticsTimeSeriesData) HasMetric() bool {
	if o != nil && !IsNil(o.Metric) {
		return true
	}

	return false
}

// SetMetric gets a reference to the given string and assigns it to the Metric field.
func (o *AnalyticsTimeSeriesData) SetMetric(v string) {
	o.Metric = &v
}

func (o AnalyticsTimeSeriesData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnalyticsTimeSeriesData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Metric) {
		toSerialize["metric"] = o.Metric
	}
	return toSerialize, nil
}

type NullableAnalyticsTimeSeriesData struct {
	value *AnalyticsTimeSeriesData
	isSet bool
}

func (v NullableAnalyticsTimeSeriesData) Get() *AnalyticsTimeSeriesData {
	return v.value
}

func (v *NullableAnalyticsTimeSeriesData) Set(val *AnalyticsTimeSeriesData) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsTimeSeriesData) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsTimeSeriesData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsTimeSeriesData(val *AnalyticsTimeSeriesData) *NullableAnalyticsTimeSeriesData {
	return &NullableAnalyticsTimeSeriesData{value: val, isSet: true}
}

func (v NullableAnalyticsTimeSeriesData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsTimeSeriesData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


