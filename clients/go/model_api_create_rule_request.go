/*
Rule Engine API

A robust rule engine microservice for IoT automation. Allows users to create and manage custom automation rules with Lua script execution in a secure sandboxed environment.

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ruleengine

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiCreateRuleRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiCreateRuleRequest{}

// ApiCreateRuleRequest struct for ApiCreateRuleRequest
type ApiCreateRuleRequest struct {
	Enabled *bool `json:"enabled,omitempty"`
	LuaScript string `json:"lua_script"`
	Name string `json:"name"`
	Priority *int32 `json:"priority,omitempty"`
}

type _ApiCreateRuleRequest ApiCreateRuleRequest

// NewApiCreateRuleRequest instantiates a new ApiCreateRuleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiCreateRuleRequest(luaScript string, name string) *ApiCreateRuleRequest {
	this := ApiCreateRuleRequest{}
	this.LuaScript = luaScript
	this.Name = name
	return &this
}

// NewApiCreateRuleRequestWithDefaults instantiates a new ApiCreateRuleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiCreateRuleRequestWithDefaults() *ApiCreateRuleRequest {
	this := ApiCreateRuleRequest{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ApiCreateRuleRequest) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCreateRuleRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ApiCreateRuleRequest) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ApiCreateRuleRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetLuaScript returns the LuaScript field value
func (o *ApiCreateRuleRequest) GetLuaScript() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LuaScript
}

// GetLuaScriptOk returns a tuple with the LuaScript field value
// and a boolean to check if the value has been set.
func (o *ApiCreateRuleRequest) GetLuaScriptOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LuaScript, true
}

// SetLuaScript sets field value
func (o *ApiCreateRuleRequest) SetLuaScript(v string) {
	o.LuaScript = v
}

// GetName returns the Name field value
func (o *ApiCreateRuleRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApiCreateRuleRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApiCreateRuleRequest) SetName(v string) {
	o.Name = v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *ApiCreateRuleRequest) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCreateRuleRequest) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *ApiCreateRuleRequest) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *ApiCreateRuleRequest) SetPriority(v int32) {
	o.Priority = &v
}

func (o ApiCreateRuleRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiCreateRuleRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	toSerialize["lua_script"] = o.LuaScript
	toSerialize["name"] = o.Name
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	return toSerialize, nil
}

func (o *ApiCreateRuleRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lua_script",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiCreateRuleRequest := _ApiCreateRuleRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiCreateRuleRequest)

	if err != nil {
		return err
	}

	*o = ApiCreateRuleRequest(varApiCreateRuleRequest)

	return err
}

type NullableApiCreateRuleRequest struct {
	value *ApiCreateRuleRequest
	isSet bool
}

func (v NullableApiCreateRuleRequest) Get() *ApiCreateRuleRequest {
	return v.value
}

func (v *NullableApiCreateRuleRequest) Set(val *ApiCreateRuleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApiCreateRuleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApiCreateRuleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiCreateRuleRequest(val *ApiCreateRuleRequest) *NullableApiCreateRuleRequest {
	return &NullableApiCreateRuleRequest{value: val, isSet: true}
}

func (v NullableApiCreateRuleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiCreateRuleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


