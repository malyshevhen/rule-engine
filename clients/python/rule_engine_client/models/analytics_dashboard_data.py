# coding: utf-8

"""
    Rule Engine API

    A robust rule engine microservice for IoT automation. Allows users to create and manage custom automation rules with Lua script execution in a secure sandboxed environment.

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from rule_engine_client.models.analytics_execution_stats import AnalyticsExecutionStats
from rule_engine_client.models.analytics_rule_stats import AnalyticsRuleStats
from rule_engine_client.models.analytics_time_series_data import AnalyticsTimeSeriesData
from typing import Optional, Set
from typing_extensions import Self

class AnalyticsDashboardData(BaseModel):
    """
    AnalyticsDashboardData
    """ # noqa: E501
    execution_trend: Optional[AnalyticsTimeSeriesData] = None
    latency_trend: Optional[AnalyticsTimeSeriesData] = None
    overall_stats: Optional[AnalyticsExecutionStats] = None
    rule_stats: Optional[List[AnalyticsRuleStats]] = None
    success_rate_trend: Optional[AnalyticsTimeSeriesData] = None
    time_range: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["execution_trend", "latency_trend", "overall_stats", "rule_stats", "success_rate_trend", "time_range"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnalyticsDashboardData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of execution_trend
        if self.execution_trend:
            _dict['execution_trend'] = self.execution_trend.to_dict()
        # override the default output from pydantic by calling `to_dict()` of latency_trend
        if self.latency_trend:
            _dict['latency_trend'] = self.latency_trend.to_dict()
        # override the default output from pydantic by calling `to_dict()` of overall_stats
        if self.overall_stats:
            _dict['overall_stats'] = self.overall_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rule_stats (list)
        _items = []
        if self.rule_stats:
            for _item_rule_stats in self.rule_stats:
                if _item_rule_stats:
                    _items.append(_item_rule_stats.to_dict())
            _dict['rule_stats'] = _items
        # override the default output from pydantic by calling `to_dict()` of success_rate_trend
        if self.success_rate_trend:
            _dict['success_rate_trend'] = self.success_rate_trend.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnalyticsDashboardData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "execution_trend": AnalyticsTimeSeriesData.from_dict(obj["execution_trend"]) if obj.get("execution_trend") is not None else None,
            "latency_trend": AnalyticsTimeSeriesData.from_dict(obj["latency_trend"]) if obj.get("latency_trend") is not None else None,
            "overall_stats": AnalyticsExecutionStats.from_dict(obj["overall_stats"]) if obj.get("overall_stats") is not None else None,
            "rule_stats": [AnalyticsRuleStats.from_dict(_item) for _item in obj["rule_stats"]] if obj.get("rule_stats") is not None else None,
            "success_rate_trend": AnalyticsTimeSeriesData.from_dict(obj["success_rate_trend"]) if obj.get("success_rate_trend") is not None else None,
            "time_range": obj.get("time_range")
        })
        return _obj


