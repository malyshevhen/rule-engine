# coding: utf-8

"""
    Rule Engine API

    A robust rule engine microservice for IoT automation. Allows users to create and manage custom automation rules with Lua script execution in a secure sandboxed environment.

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AnalyticsRuleStats(BaseModel):
    """
    AnalyticsRuleStats
    """ # noqa: E501
    average_latency_ms: Optional[Union[StrictFloat, StrictInt]] = None
    failed_executions: Optional[StrictInt] = None
    last_executed: Optional[StrictStr] = None
    rule_id: Optional[StrictStr] = None
    rule_name: Optional[StrictStr] = None
    success_rate: Optional[Union[StrictFloat, StrictInt]] = None
    successful_executions: Optional[StrictInt] = None
    total_executions: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["average_latency_ms", "failed_executions", "last_executed", "rule_id", "rule_name", "success_rate", "successful_executions", "total_executions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnalyticsRuleStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnalyticsRuleStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "average_latency_ms": obj.get("average_latency_ms"),
            "failed_executions": obj.get("failed_executions"),
            "last_executed": obj.get("last_executed"),
            "rule_id": obj.get("rule_id"),
            "rule_name": obj.get("rule_name"),
            "success_rate": obj.get("success_rate"),
            "successful_executions": obj.get("successful_executions"),
            "total_executions": obj.get("total_executions")
        })
        return _obj


