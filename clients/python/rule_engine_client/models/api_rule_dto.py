# coding: utf-8

"""
    Rule Engine API

    A robust rule engine microservice for IoT automation. Allows users to create and manage custom automation rules with Lua script execution in a secure sandboxed environment.

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from rule_engine_client.models.api_action_dto import ApiActionDTO
from rule_engine_client.models.api_trigger_dto import ApiTriggerDTO
from typing import Optional, Set
from typing_extensions import Self

class ApiRuleDTO(BaseModel):
    """
    ApiRuleDTO
    """ # noqa: E501
    actions: Optional[List[ApiActionDTO]] = None
    created_at: Optional[StrictStr] = None
    enabled: Optional[StrictBool] = None
    id: Optional[StrictStr] = None
    lua_script: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    priority: Optional[StrictInt] = None
    triggers: Optional[List[ApiTriggerDTO]] = None
    updated_at: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["actions", "created_at", "enabled", "id", "lua_script", "name", "priority", "triggers", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiRuleDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item_actions in self.actions:
                if _item_actions:
                    _items.append(_item_actions.to_dict())
            _dict['actions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in triggers (list)
        _items = []
        if self.triggers:
            for _item_triggers in self.triggers:
                if _item_triggers:
                    _items.append(_item_triggers.to_dict())
            _dict['triggers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiRuleDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actions": [ApiActionDTO.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None,
            "created_at": obj.get("created_at"),
            "enabled": obj.get("enabled"),
            "id": obj.get("id"),
            "lua_script": obj.get("lua_script"),
            "name": obj.get("name"),
            "priority": obj.get("priority"),
            "triggers": [ApiTriggerDTO.from_dict(_item) for _item in obj["triggers"]] if obj.get("triggers") is not None else None,
            "updated_at": obj.get("updated_at")
        })
        return _obj


