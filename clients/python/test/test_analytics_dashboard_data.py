# coding: utf-8

"""
    Rule Engine API

    A robust rule engine microservice for IoT automation. Allows users to create and manage custom automation rules with Lua script execution in a secure sandboxed environment.

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from rule_engine_client.models.analytics_dashboard_data import AnalyticsDashboardData

class TestAnalyticsDashboardData(unittest.TestCase):
    """AnalyticsDashboardData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AnalyticsDashboardData:
        """Test AnalyticsDashboardData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AnalyticsDashboardData`
        """
        model = AnalyticsDashboardData()
        if include_optional:
            return AnalyticsDashboardData(
                execution_trend = rule_engine_client.models.analytics/time_series_data.analytics.TimeSeriesData(
                    data = [
                        rule_engine_client.models.analytics/time_series_point.analytics.TimeSeriesPoint(
                            timestamp = '', 
                            value = 1.337, )
                        ], 
                    metric = '', ),
                latency_trend = rule_engine_client.models.analytics/time_series_data.analytics.TimeSeriesData(
                    data = [
                        rule_engine_client.models.analytics/time_series_point.analytics.TimeSeriesPoint(
                            timestamp = '', 
                            value = 1.337, )
                        ], 
                    metric = '', ),
                overall_stats = rule_engine_client.models.analytics/execution_stats.analytics.ExecutionStats(
                    average_latency_ms = 1.337, 
                    failed_executions = 56, 
                    success_rate = 1.337, 
                    successful_executions = 56, 
                    total_executions = 56, ),
                rule_stats = [
                    rule_engine_client.models.analytics/rule_stats.analytics.RuleStats(
                        average_latency_ms = 1.337, 
                        failed_executions = 56, 
                        last_executed = '', 
                        rule_id = '', 
                        rule_name = '', 
                        success_rate = 1.337, 
                        successful_executions = 56, 
                        total_executions = 56, )
                    ],
                success_rate_trend = rule_engine_client.models.analytics/time_series_data.analytics.TimeSeriesData(
                    data = [
                        rule_engine_client.models.analytics/time_series_point.analytics.TimeSeriesPoint(
                            timestamp = '', 
                            value = 1.337, )
                        ], 
                    metric = '', ),
                time_range = ''
            )
        else:
            return AnalyticsDashboardData(
        )
        """

    def testAnalyticsDashboardData(self):
        """Test AnalyticsDashboardData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
