# coding: utf-8

"""
    Rule Engine API

    A robust rule engine microservice for IoT automation. Allows users to create and manage custom automation rules with Lua script execution in a secure sandboxed environment.

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from rule_engine_client.models.api_create_action_request import ApiCreateActionRequest

class TestApiCreateActionRequest(unittest.TestCase):
    """ApiCreateActionRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiCreateActionRequest:
        """Test ApiCreateActionRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiCreateActionRequest`
        """
        model = ApiCreateActionRequest()
        if include_optional:
            return ApiCreateActionRequest(
                enabled = True,
                lua_script = 'log_message('info', 'Temperature alert triggered')'
            )
        else:
            return ApiCreateActionRequest(
                lua_script = 'log_message('info', 'Temperature alert triggered')',
        )
        """

    def testApiCreateActionRequest(self):
        """Test ApiCreateActionRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
