# coding: utf-8

"""
    Rule Engine API

    A robust rule engine microservice for IoT automation. Allows users to create and manage custom automation rules with Lua script execution in a secure sandboxed environment.

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from rule_engine_client.models.api_update_rule_request import ApiUpdateRuleRequest

class TestApiUpdateRuleRequest(unittest.TestCase):
    """ApiUpdateRuleRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiUpdateRuleRequest:
        """Test ApiUpdateRuleRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiUpdateRuleRequest`
        """
        model = ApiUpdateRuleRequest()
        if include_optional:
            return ApiUpdateRuleRequest(
                enabled = False,
                lua_script = 'if event.temperature > 30 then return true end',
                name = 'Updated Rule Name',
                priority = 5
            )
        else:
            return ApiUpdateRuleRequest(
        )
        """

    def testApiUpdateRuleRequest(self):
        """Test ApiUpdateRuleRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
